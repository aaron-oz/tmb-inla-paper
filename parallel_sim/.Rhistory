experiments
96 * 25 / 60
experiments
36 * 25 / 60
nga
nga1
master.res
outs_dir
norm.var
    sim.obj <- sim.realistic.data(reg = reg,
                                  year_list = year_list,
                                  data.lik = data.lik,
                                  sd.norm = sqrt(norm.var),
                                  alpha = alpha,
                                  betas = betas,
                                  sp.kappa = sp.kappa,
                                  sp.alpha = sp.alpha,
                                  t.rho = t.rho,
                                  pixel.iid.var = NULcoL,
                                  n.clust = n.clust,
                                  m.clust = m.clust,
                                  clust.re.var = clust.var,
                                  covs = covs,
                                  cov_layers = NULL,
                                  fixed.locs = NULL,
                                  fixed.gp = NULL,
                                  simple_raster = simple_raster,
                                  simple_polygon = simple_polygon,
                                  out.dir = out.dir,
                                  pop_raster = pop_raster,
                                  obs.loc.strat = obs.loc.strat,
                                  urban.pop.pct = urban.pop.pct,
                                  urban.strat.pct = urban.strat.pct,
                                  sp.field.sim.strat = 'RF',
                                  seed = seed,
                                  verbose = FALSE,
                                  exp.iter = exp.iter)
cov_list
pop_raster
alpha
sp.kappa
sp.alpha
t.rho
n.clust
num.obs
m.clust
e = 1
i = 1
simple_polygon
sample.strat
?? inv.logit
sim.obj
plot(sim.obj$true.rast)
4 * 900 / 60
m = 'low'
mesh.res.dict
mesh.params
geo.prj
CRS(geo.prj)
mesh.list[[m]]
mesh.list[[m]]$n
m
mesh.params
mesh.list[[m]]
mesh.res
groups_periods
unique(group_periods)
unique(groups_periods)
matern.pri
spde
formula
mesh_s$n
mesh_s$n
e
experiments[e, mesh.res]
mesh.list[[low]]
mesh.list[['low']]$mesh$n
mesh.res
m = mesh.res[1]
m
experiments[, mesh.res]
? setDT
experiments
experiments[ 1, mesh.res]
experiments[ 1, mesh.res]
? data.table
? expand.grid
experiments[ 1, mesh.res]
experiments[ 1, mesh.res]
mesh_s$n
mesh_s$n
e
mesh.s$n
post.i.fit.t - pre.i.fit.t
cores
i.fit = res_fit
? inla.posterior.sample
pre.i.draw.t
local.res
local.res
local.res
rm(list = ls())
q()
total.rows
experiments[, .N]
27 * 
q()
q()
master.res
master.res
 (master.res[time == -999.9, .(exp, iter)])
q()
inla.update(testing = T)
inla.upgrade(testing = T)
inla.upgrade(testing = F)
inla.upgrade(testing = Fi)
? inla.update
q()
master.res
master.res
mean.times
mean.times
mean.times
experiments
experiments
mean.times
mean.times
expeirments
experiments
mean.times
mean.times
mean.times
mean.times
mean.times
mean.times
mean.times
mean.times
mean.times
mean.times
mean.times
mean.times
q()
rr = 1
experiments
uncompleted.e.i <- experiments
rr = 27
e = 27
i = 1
cores
getwd()
list.dirs()
getwd()
openmp(NULL)
getwd()  C-c C-c
openmp()
q()
master.res
experiments
e = i = 1
uncom
e
i
fit_time_tmb
cores = 4
cores
fit_time_tmb
experiments
e = 23
cores = 1
cores
cores = 1
cores
cores = 4
q()
e = 27
i = 1
cores
cores = 1
cores
q()
experiments
e = 24;i = 1
cores
pre.fit.t.t
post.norm.t
post.t.draw.t
pre.t.draw.t
post.t.draw.t
proc.time()
proc.time()
proc.time()
proc.time()
proc.time()
proc.time()
proc.time()
proc.time()
proc.time()
proc.time()
proc.time()
proc.time()
cores = 1
? inla.posterior.sample
experiments
experiments[, inla.approx := 'ccd']
experiments[, inla.int := 'grid']
experiments[, inla.approx := 'ccd']
experiments
master.res
master.res[, inla.int.strat := 'ccd']
master.res[, inla.approx := 'sl']
master.res[, inla.approx := 'simplified.laplace']
master.res
q()
uncompleted.e.i
rr = 1
experiments
n.draws
inla.times
tmb.times
local.res
master.res
dim(master.res)
135 * 10
135 * 10 * 2
master.ress
master.res
local.re
local.res
q()
uncompleted.e.i

mesh.list <- list()
for(m in mesh.res){
  ## make the triangulation
  mesh.s <- inla.mesh.2d(loc.domain = as.matrix(pix.pts.numeric[,2:3]),
                         max.e = mesh.res.dict[[m]])
  spde <- inla.spde2.pcmatern(mesh=mesh.s, alpha =2,
                              prior.range = matern.pri[1:2],
                              prior.sigma = matern.pri[3:4])
  mesh.list[[m]] <- list(mesh = mesh.s,
                         A.pred = inla.spde.make.A(mesh = mesh.s,
                                                   loc = pcoords,
                                                   group = 1),
                         spde = spde,
                         space = inla.spde.make.index("space",
                                                      n.spde = spde$n.spde,
                                                      n.group = 1))
  # print out number of REs per mesh
  print(glue('the {m} resolution mesh has {mesh.list[[m]]$mesh$n} vertices'))
}


sp.kappa   <- sqrt(8) / sp.range

uncompleted.e.i
experiments[11, ]
uncompleted.e.i
experiments
rm
ls()
rm(simple_polygon)
q()
q()
sort(sapply(ls(), function(x){object.size(get(x))}))
gc()
sim.realistic.data
sort(sapply(ls(), function(x){object.size(get(x))}))
sort(sapply(ls(), function(x){object.size(get(x))}))
sort(sapply(ls(), function(x){object.size(get(x))}))
sort(sapply(ls(), function(x){object.size(get(x))}))
sort(sapply(ls(), function(x){object.size(get(x))}))
sum(sapply(ls(), function(x){object.size(get(x))}))
? object.size
sum(sapply(ls(), function(x){object.size(get(x, units = "Mb"))}))
sum(sapply(ls(), function(x){object.size(get(x), units = "Mb")}))
sum(sapply(ls(), function(x){object.size(get(x))})) / 1000
5 / 16
rm(sim.realistic.data)
gc()
sum(sapply(ls(), function(x){object.size(get(x))})) / 1000
3 / 16
rm(list = ls())
gc()
gc()
gc()
gc()
gc()
gc()
gc()
gc()
gc()
q()
sapply(ls(), function(x){object.size(get(x))})
? gc
? gc
q()
code.repo
q()
q()
q()
uncompleted.e.i
experiments
q()
uncompleted.e.i
master.res
q()
list.files(outs.dir)
master.res1
master.res1
master.res2
master.res2[, unique(stage)]
master.res1
tmb.fit
tmb.fit
master.res2
tmb.fit
tmb.fit
merger
? merger
? merge
? merge
? data.table::merge
tmb.fit
tmb.fit
? setorder
master.res1
master.res2
master.res
mean.times
mean.times
master.res
mean.times
135 * 3
1890
master.res1
master.res2
1485 - 405
1080 / 8
mean.times
master.res2
master.res2
mean.times1
mean.times2
master.res2
master.res2
master.res2
tmb.fit
master.res2
master.res2
mean.times1
mean.times2
experiments
experiments
experiments
mean.times
mean.times
mean.times
? toUpper
mean.times
? setorder
? as.factor
plot.dir
>
  ## set the lines
  mean.times$line_group <- paste(mean.times$Method,   mean.times$cores)
mesh.list
mesh_list
names(mesh.list[[1]])
lapply(mesh.list, function(x){x$mesh$n.spde})
mesh.list$low$mesh
mesh.list$low$mesh$N
mesh.list$low$mesh$n
lapply(mesh.list, function(x){x$mesh$n})
mean.times
mean.times
mean.times
mean.times
mean.times
mean.times
? expand.grid
grit.pts
grit.pts
x
x
x
grid.pts
grid.pts
? RFsimulate
? raster
true.gp
plot(true.gp)
plot(true.gp)
? raster
? raster
? raster
? args(raster)
? args(raster)
? raster
args(raster)
plot(gp.rast)
plot(gp.rast)
true.gp
str(gp.rast)
true.gp
true.gp
true.gp$variable1
length(as.numeric(true.gp$variable))
plot(model)

## setup continuous domain
#set.seed(413206)
x <- seq(0, 10, length = 200)
grid.pts <- expand.grid(x, x)
## sample from a matern RF
sp.alpha <- 2
sp.kappa <- 0.1
sp.var   <- 1
model <- RMmatern(nu    = sp.alpha - 1, ## from INLA book
                  scale = sqrt(2 * (sp.alpha - 1)) / sp.kappa,
                  var   = 1)
true.gp <- RFsimulate(model, x = grid.pts[, 1], y = grid.pts[, 2], n =1, spConform = TRUE)
## insert into a raster
gp.rast <-      raster(nrows=length(x), ncols=length(x), xmn=0, xmx=10, ymn=0, ymx=10,
                       vals=as.numeric(true.gp$variable1))
plot(gp.rast, maxpixels = length(x) ^ 2)

dat
raster::extract
? raster::extract
? raster::extract
plogis(-2)
dat

par(mfrow = c(1, 2))
plot(gp.rast, maxpixels = length(x) ^ 2, xlim = range(x), ylim = range(x))
fields::quilt.plot(dat[, x], dat[, y], dat[, obs] / dat[, n])

? abline
? polygon
max(grit.pts)
max(grid.pts)
spde
grid.pts
str(grid.pts)
? TMB::compile
getwd
getwd()
q()
