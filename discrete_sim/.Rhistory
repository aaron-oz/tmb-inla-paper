class(A)
ls()
compile("spde.cpp")
library(TMB)
compile("spde.cpp")
setwd("~/Documents/GitRepos/linux_pkgs/adcomp/tmb_examples/")
data$spde
class(data$spde$M0)
class(data$spde)
rm(list = ls())
dyn.load( dynlib("bym2") )
setwd("~/Documents/GitRepos/tmb_inla_comp/discrete_sim")
q()
n
data_full
data_full
TMB::compile("./bym2.cpp")
TMB::compile("./bym2.cpp")
TMB::compile("./bym2.cpp")
TMB::compile("./bym2.cpp")
TMB::compile("./bym2.cpp")
TMB::compile("./bym2.cpp")
TMB::compile("./bym2.cpp")
TMB::compile("./bym2.cpp")
TMB::compile("./bym2.cpp")
TMB::compile("./bym2.cpp")
TMB::compile("./bym2.cpp")
TMB::compile("./bym2.cpp")
TMB::compile("./bym2.cpp")
TMB::compile("./bym2.cpp")
TMB::compile("./bym2.cpp")
TMB::compile("./bym2.cpp")
TMB::compile("./bym2.cpp")
sp
TMB::compile("./bym2.cpp")
q()
n
TMB::compile("./bym2.cpp")
q()
    TMB::compile("./bym2.cpp")
    TMB::compile("./bym2.cpp")
q()
logit_phi = 0
priors[['phi']][['params']]
plogis(-5)
dlogtgaussian(.5, 0, 1)
    TMB::compile("./bym2.cpp")
    TMB::compile("./bym2.cpp")
    TMB::compile("./bym2.cpp")
q()
? summary
SD0$par.fixed
SD0$par.random
SD0$sd
summary(SD0, "fixed")
summary(SD0, "random")
summary(SD0, "all")
? sdreport
plogis(.44)
exp(2.75)
tau
phi
q()
tmb.bym2.random
names(SD0)
dim(CD0$cov)
dim(CD0$cov)
dim(SD0$cov)
dim(SD0$cov.fixed)
SD0$diag.cov.random
o
SD0$sd
SD0$cov.fixed
SD0$cov
sqrt(.2734)
sqrt(0.015529)
test <- rnorm(n = 1000, SD0$par.fixed[1], sd = sqrt(.27341510))
sd(plogis(test))
names(SD0)
summary(SD0, 'report')
q()
    TMB::compile("./bym2.cpp")
    TMB::compile("./bym2.cpp")
    TMB::compile("./bym2.cpp")
    TMB::compile("./bym2.cpp")
    TMB::compile("./bym2.cpp")
   TMB::compile("./bym2.cpp")
? tmap
unstr.sim1.tm
tmap_options()
unstr.sim1.tm
inla.bym2
q()
dynlib
? dyn.load
? try
SD0
names(SD0)
SD0$value
SD0$sd
? MakeADFun
? MakeADFun
q()
SD0
names(SD0)
SD0$value
length(SD0$value)
dim(SD0$jointPrecision)
colnames(SD0$jointPrecision)
names(SD0)
> dim(SD0$cov)
dim(SD0$cov)
names(SD0$cov)
SD0$par.random
names(SD0)
SD0$value
sum(tmb.bym2.struc.est)
sum(tmb.bym2.struc.est)
tmb.bym2.unconstr.est <- SD0$par.random[38:74]
length(SD0$par.random)
cbind(tmb.bym2.struc.est, tmb.bym2.unconstr.est)
q()
SD0
names(SD0)
SD0$value
SD0$env
SD0$par.fixed
SD0$par.random
obj
names(obj)
obj$report
obj$report()
q()
TMB::compile("./bym2.cpp")
TMB::compile("./bym2.cpp")
TMB::compile("./bym2.cpp")
TMB::compile("./bym2.cpp")
opt0$report()
opt0$report
opt0$report()
R0
SD0
SD)$values
SD0$values
SD0$value
sum(tmb.bym2.struc.est)
sum(tmb.bym2.unstr.est)
tmb.bym2.struc
SD0$value
names(SD0)
SD0$cov
names(SD0$cov)
length(SD0$value)
q()
? tm_polygons
tmap_arrange(nga.pop.tm, sim.total.plot1, pois.sim1.tm, ncol = 3)
tmap::palette_explorer()
tmaptools::palette_explorer()
install.packages("shinyjs")
tmaptools::palette_explorer()
utils::browseURL
getOption("browser")
getOption("pdfreader")
pop / 1000
getOption
getOption()
getOption("PDFreader")
getOption("pdf_reader")
getOption("pdf_reader")
setOption(browser = "/usr/bin/qutebrowser")
options()
options(browser = "/usr/bin/qutebrowser")
tmaptools::palette_explorer()
tmaptools::palette_explorer()
tmaptools::palette_explorer()
inla.bym2
summary(inla.bym2)
inla.bym2.a
inla.bym2.alpha.est
inla.bym2.total
inla.bym2.total.est
inla.effects <- cbind(inla.bym2.unstr.est, inla.bym2.struc.est, inla.bym2.total.est)
inla.effects <- cbind(inla.bym2.unstr.est, inla.bym2.struc.est, inla.bym2.total.est)
inla.effects
total <- 1 / sqrt(tau) * (sqrt(1 - phi) * inla.bym2.unstr.est + sqrt(phi) * inla.bym2.struc.est)
total
1 / sqrt(tau)
var(inla.bym2.unstr.est)
var(inla.bym2.struc.est)
1 / sqrt(tau)
1 / tau
sqrt(0.2)
? pairs
var(inla.bym2.total.est)
1 / inla.bym2.prec
inla.bym2.tau.est
1 / inla.bym2.tau.est
TMB::compile("./bym2.cpp")
pairs(inla.effects, xlim = range(inla.effects), ylim = range(inla.effects))
? inla
? control.fixed
inla.formula
q()
log(1)
q()
inla.formula
colnames(inla.effects)
inla.effects
risk_brks
obj
names(obj)
obj$par
names(opt0)
opt0$objective
opt0$par
phi
exp(logit_phi)
> 
tau
log(tau)
plogis(phi)
qlogis(phi)
phi
plogis(10)
plogis(-5.25)
priors
1 / sqrt(.04)
q()
scaling_factor
sparse.mat = T
Q.s.inv <- solve(Q.s)
scaling_factor <- exp(mean(log(diag(Q.s.inv))))
scaling_factor
Q.u
Q.s
scaling_factor <- exp(mean(log(diag(solve(Q.u)))))
scaling_factor
Q.s2[1:5, 1:5]
Q.s[1:5, 1:5]
solve(Q.s2)[1:5, 1:5]
solve(Q.s)[1:5, 1:5]
diag(Q.s)
diag(Q.s2)
o
Q.u
Q.u.inv
Q.s
solve(Q.s)
inla.qsolve(Q.s, 
Q.u.inv <- inla.qinv(Q.u)

scaling_factor <- 

Q.u.inv <- inla.qinv(Q.u)

scaling_factor <- 
solve(Q.s)
inla.qsolve(Q.s, constr=list(A = matrix(1, nrow = 1, ncol = ncol(Q.u)), e=0))
constr=list(A = matrix(1, nrow = 1, ncol = ncol(Q.u)), e=0)constr=list(A = matrix(1, nrow = 1, ncol = ncol(Q.u)), e=0)))
inla.qinv(Q.s, constr=list(A = matrix(1, nrow = 1, ncol = ncol(Q.u)), e=0))
q()
e = 1
s.pop
i = 1
t.bym
t.bym.total
t.bym.total
sum(t.bym.struc)
y.obs
t.risk
exp(t.bym.t)
exp(t.bym.total)
log(t.bym.total)
exp(t.bym.total - 3)
bym.int
exp(t.bym.total - 3)
sim_field_data
exp(bym.int + t.bym.total)
t.risk
q()
e = i = 1
mu
rmvnorm_prec
t.draws[1, ]
t.draws[, 1]
dim(t.draws)
parnames
parnames
t.draws[, 1][40:77]
t.draws[, 1][50:77]
t.draws[, 1][41:77]
sum(t.draws[, 1][41:77])
e.i.field
i.draws[[1]]
i.e.field[[1]$latent
i.e.field[[1]]$latent
e.i.field[[1]]$latent
e.i.field[[1]]
i.draws[[1]]$latent
i.draws[[1]]$latent[1:3]
i.draws[[1]]$latent[38:74]
sum(i.draws[[1]]$latent[38:74])
? inla.posterior.sample
i.fit
summary(i.fit)
summary(i.fit$random)
i.fit$marginals.random
i.fit$summary.random
i.fit$summary.fitted.values$mean
i.fit$summary.fitted.values[, 1]
str(i.fit$summary.fitted.values)
str(i.fit$summary.random)
sum(i.fit$summary.random$mean[38:74])
sum(i.draws[[1]]$latent[38:74])
sum(i.draws[[2]]$latent[38:74])
sum(i.draws[[3]]$latent[38:74])
sum(i.draws[[4]]$latent[38:74])
lapply(i.draws, function(x){
rmvnorm_prec
SDO$jointPrecision
SD0$jointPrecision
dim(SD0$precison)
dim(SD0$jointPrecison)
dim(SD0$jointPrecision)
mu
llength(mu)
length(mu)
length((length(mu) - n.reg):length(mu))
constrain.idx.vec
args(rbym2_simul_1constr_prec)
)
)
constrain.idx = constrain.idx.vec
constrain.idx
constrain.idx <- tail(1:length(mu), n.reg)
constrain.idx
A
sum(A)
A
e
dim(t.draws)
str(t.draws)
dim(t.draws)
apply(t.draws, 2, function(x){sum(x[41:77])})
parnames
t.param.idx
parnames
t.draws
e.i.param
t.hyper.idx
t.hyper.idx
t.draws[c(1, 2:3), ]
e.i.param
e.i.param[2, ]
e.t.total
? col
a 
a <- matrix(1:9, ncol = 3)
a
a + 1:3
t(t(a) + 1:3)
t(a)
> t(a) + 1:3
t(a) + 1:3
t(t(a) + 1:3)
t((t(a) + 1:3))
t(a) + 1:3
b <- t(a) + 1:3
b
t(b)
a
t(b) - a
t( (t(a) + 1:3) ) - a
t( (t(a) + 1:3) )
t(b0
(b)
t(b)
t(t(a) + 1:3)
a
e.t.field - e.t.total
t.draws[t.total.idx, ]
e.t.field - e.t.total
dim(t.draws)
dim(e.t.total)
dim(t.draws)
dim(t(t(e.t.total) + t.draws[t.param.idx, ]) )
dim( data.table( t(t(e.t.total) + t.draws[t.param.idx, ]) ))
e
names(local.res)
e
? grep
dim(e)
e
tau
bym.tau
e
cp
e.lio
e.lui
e.lio
e.lui
e.lui
e.lio
e.lui
cc = 1
c
cc = 2
cc
u.cc
local.res
25
cp
e.sum
cc
e.sum
e.sum
local.res[, est]
local.res
colnames(local.res)
e.sum
e.sum
e.lui[75, ]
colnames(e.lui)
e.sum
e.sum
e.lui[80, ]
local.res[, truth]
li[80]
li
e.sum
e.sum
local.res
e
e = 1
local.res
e.sum
cc
e.lui
e.sum
est
e.sum
e.sum
cbind(local.res[, truth], e.sum)
i.draws[[1]]$latent
e.sum
e.sum
e.sum
e.sum
local.res
slot.cols
list(e.sum[, slot.cols, with = F])
as.list(e.sum[, slot.cols, with = F])
local.res
colnames(master.res)
colnames(local.res)
total.rows
2 * 37 * (total.rows / (n.mth * n.reg))
 rep(rep(c("inla", "tmb"), each = n.reg), total.rows / (n.mth * n.reg))
table( rep(rep(c("inla", "tmb"), each = n.reg), total.rows / (n.mth * n.reg)))
local.res
getwd()
code_root
master.res <- fread(file.path(outs_dir, "master_results.csv")
)
head(master.res)
outs_dir
q()
e = i = 1
head(master.res)
master.res <- fread(file.path(outs_dir, "master_results.csv"))
head(master.res)
master.res[, which(is.na(est))][1]
master.res[, which(is.na(est))]
master.res[, est == -999.9][1]
master.res[, which(est == -999.9)][1]
master.res[2961, ]
q()
outs_dir
head(exps)
pt
total.cov
total.cov
outs_dir
getwd()
total.cov
total.cov
param.cov
exps
group.cov
group.var
group.cov
exps
group.cov
group.cov
if(interactive()){ ## then we can view
  print(fit_coverage_CI_summary)
}
long.cov.sum
head(long.cov.sum)
)
long.cov.sum
q()
