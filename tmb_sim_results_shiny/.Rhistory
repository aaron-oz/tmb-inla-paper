                          "INLA: SL + EB",
                          "INLA: SL + CCD",
                          "INLA: L + EB",
                          "INLA: L + CCD")[model.selection]


    ## make the plot title
    pt <- sprintf('Parameter Bias for %s Observations',
                  stringr::str_to_title(dl))
    #    if(dl == "normal"){
    #     pt <- paste0(pt, sprintf(" with %0.02f Variance:\n", norm.var))
    #  }else{
    pt <- paste0(pt, ":\n")
    # }
    pt <- paste(pt, sprintf('Median and %0.0f%% Quantile Bars across Monte Carlo Replicates', cov.width*100))

    # subset to all models desired
    long.cov.sub <- rbindlist(lapply(models.to.plot, function(x){subset(fe.mean.long,
                                                                        data.lik == dl &
                                                                          grepl(x, fe.mean.long$fit_type))}))

    ## subset to mesh
    if(mesh.resolution %in% c('low', 'med', 'high')){
      long.cov.sub <- subset(long.cov.sub, mesh.res == mesh.resolution)
    } ## ow, it is 'all', and we average across it

    # nice plot legend names
    for(nn in 1:length(model.plot.names)){
      long.cov.sub[fit_type == models.to.plot[nn], fit_type := model.plot.names[nn]]
    }

    # get intervals
    fe.mean.long.sum <-  summarySE(long.cov.sub, measurevar="value",
                                   groupvars=c("data.lik", 'norm.var', 'n.clust',
                                               "fit_type", 'clust.var.cat',
                                               'variable'),
                                   conf.interval = cov.width)

    ## final rename for plotting
    setnames(fe.mean.long.sum, 'n.clust',  'Number of Clusters')
    setnames(fe.mean.long.sum, 'norm.var', 'Observation Variance')


    pd <- position_dodge(.25)
    fe_bias_summary <- ggplot(fe.mean.long.sum,
                              aes(x=log(`Number of Clusters`), y=med,
                                  shape = fit_type,
                                  linetype = fit_type,
                                  colour = clust.var.cat)) +
      geom_errorbar(position=pd, aes(ymin=l.ci, ymax=u.ci), width=.025) +
      geom_line(position=pd) +
      geom_point(position=pd, size=2) +
      geom_abline(intercept = 0, slope=0) +
      ## facet_wrap(. ~ variable, scales='free_y') +
      ggtitle(pt) +
      ## fix the legends a bit
      labs(color = 'Cluster Var.', shape='Method', linetype = 'Method') + ## legend titles
      xlab('Number of Clusters') +
      scale_x_continuous(breaks = log(sort(fe.mean.long.sum$`Number of Clusters`)), ## add log x-axis labels
                         labels = paste0('ln(', sort(fe.mean.long.sum$`Number of Clusters`), ')')) +
      theme(axis.text.x = element_text(angle = 45, hjust = 1, face = 'plain', family='sans')) + ## rotate x-axis ticks
      theme(text = element_text(size = 20))  + # increase base size of all font
      ylab('Bias: (Estimate - True)')

    if(dl=='binom'){
      fe_bias_summary <- fe_bias_summary +
        facet_wrap(. ~ variable,
                   labeller = labeller(.cols = label_value),
                   scales='free_y')
      plot.w <- 10
      plot.h <- 7
    }
    if(dl == 'normal'){
      fe_bias_summary <- fe_bias_summary +
        facet_grid(variable ~ `Observation Variance`,
                   labeller = labeller(.rows = label_value, .cols = label_both),
                   scales='free')
      plot.w <- 10
      plot.h <- 12
    }

    return(fe_bias_summary)

  },
  width = "auto",
  height = reactive(input$plotHeight))

  output$biasPlotText <- renderUI({

    cov.perc        <- paste0(input$coverage, '%')
    dl              <- c("binomial", "Gaussian")[as.numeric(input$dataType)]
    model.selection <- as.numeric(input$methodType)
    mesh.resolution <- c('low', 'medium', 'high', 'all')[as.numeric(input$meshRes)]
    ## norm.var        <- (c(0.1, 0.2, 0.4) ^ 2)[as.numeric(input$obsVar)]

    model.plot.names <- c("TMB",
                          "INLA: G + EB",
                          "INLA: G + CCD",
                          "INLA: SL + EB",
                          "INLA: SL + CCD",
                          "INLA: L + EB",
                          "INLA: L + CCD")[model.selection]
    model.plot.names.string <- model.plot.names[1]
    model.plot.names <- model.plot.names[-1]
    while(length(model.plot.names) > 1){
      model.plot.names.string <- paste(model.plot.names.string, model.plot.names[1], sep = ', ')
      model.plot.names <- model.plot.names[-1]
    }
    if(length(model.plot.names) == 1){
      if(length(model.selection) > 2){
        model.plot.names.string <- paste0(model.plot.names.string, ',')
      }
      model.plot.names.string <- paste(model.plot.names.string, model.plot.names[1], sep = ' and ')
    }

    str1 <- paste0('Comparison of the estimated parameter bias from ',
                   model.plot.names.string,
                   ', plotted against the number of cluster observations for the ')

    str1 <- paste0(str1, dl, ' data experiments',
                   ifelse(dl == 'Gaussian', ' with varying observation variances. ',
                          '. '),
                   'Colors represent different cluster (i.i.d nugget) variances',
                   ' used in an experiment.')

    if(mesh.resolution == 'all'){
      str1 <- paste(str1,
                    'Each point is the median bias of three experiments (low, medium, and',
                    'high resolution SPDE triangulations), calculated across 75 replicates,'
                    )
    }else{
      str1 <- paste0(str1,
                     ' Each point is the median bias of one experiment (with ', mesh.resolution,
                     ' resolution SPDE triangulation), calculated across 25 replicates,'
                     )
    }

    str1 <- paste(str1, 'and the bars represent the middle', cov.perc,
                  'quantile range of the bias across replicates.')

    ## str1 <- paste("You have selected", input$meshRes)
    ## str2 <- paste("You have chosen a range that goes from")
    ## HTML(paste(str1, str2, sep = '<br/>'))
    HTML(str1)
  })

}
server <- function(input, output) {

  # Histogram of the Old Faithful Geyser Data ----
  # with requested number of bins
  # This expression that generates a histogram is wrapped in a call
  # to renderPlot to indicate that:
  #
  # 1. It is "reactive" and therefore should be automatically
  #    re-executed when input (input$coverage) change
  # 2. Its output type is a plot
  output$fieldPlot <- renderPlot({

    cov.width       <- input$coverage / 100
    dl              <- c("binom", "normal")[as.numeric(input$dataType)]
    model.selection <- as.numeric(input$methodType)
    mesh.resolution <- as.numeric(input$meshRes)
    ## norm.var        <- (c(0.1, 0.2, 0.4) ^ 2)[as.numeric(input$obsVar)]

    models.to.plot <- c("TMB",
                        "INLA_EB_G",
                        "INLA_CCD_G",
                        "INLA_EB_S",
                        "INLA_CCD_S",
                        "INLA_EB_L",
                        "INLA_CCD_L")[model.selection]

    model.plot.names <- c("TMB",
                          "INLA: G + EB",
                          "INLA: G + CCD",
                          "INLA: SL + EB",
                          "INLA: SL + CCD",
                          "INLA: L + EB",
                          "INLA: L + CCD")[model.selection]


    ## make the plot title
    pt <- sprintf('Average Pixel Coverage across Spatial Domain for %s Observations',
                  stringr::str_to_title(dl))
    #    if(dl == "normal"){
    #      pt <- paste0(pt, sprintf(" with %0.02f Variance:\n", norm.var))
    #    }else{
    pt <- paste0(pt, ":\n")
    #    }
    pt <- paste(pt, sprintf('Median and %0.0f%% Quantile Bars across Monte Carlo Replicates', cov.width*100))

    # subset to all models desired
    long.cov.sub <- rbindlist(lapply(models.to.plot, function(x){subset(long.cov,
                                                                        data.lik == dl &
                                                                          grepl(x, long.cov$fit_type))}))

    ## subset to mesh
    if(mesh.resolution %in% c('low', 'med', 'high')){
      long.cov.sub <- subset(long.cov.sub, mesh.res == mesh.resolution)
    } ## ow, it is 'all', and we average across it

    # nice plot legend names
    for(nn in 1:length(model.plot.names)){
      long.cov.sub[fit_type == models.to.plot[nn], fit_type := model.plot.names[nn]]
    }

    ## facet by observations
    long.cov.sum <-  summarySE(long.cov.sub, measurevar="obs_cov",
                               groupvars = c('n_target_cov',
                                             'fit_type', 'n.clust',
                                             'data.lik',
                                             'clust.var.cat',
                                             'norm.var'),
                               conf.interval = cov.width)
    ## groups to plot lines
    long.cov.sum$line_group <- paste(long.cov.sum$fit_type, long.cov.sum$clust.var, sep='_')

    ## set facet names using the labeller
    ## annoying format. must be as_labeller(c(`facet_name1`='Preferred Facet Name1', ...))
    ## facet_labs <- as_labeller(eval(parse(text=paste0('c(', paste0('`', sort(unique(long.cov$n.clust)), '`', '=', '\'', paste0('Num. Cluster Obs: ', sort(unique(long.cov$n.clust))), '\'', sep='', collapse=','), ')'))))

    ## final rename for plotting
    setnames(long.cov.sum, 'n.clust',  'Number of Clusters')
    setnames(long.cov.sum, 'norm.var', 'Observation Variance')

    pd <- position_dodge(0.05)
    fit_coverage_CI_summary <- ggplot(long.cov.sum,
                                      aes(x = n_target_cov, y = obs_cov,
                                          shape = fit_type,
                                          linetype = fit_type,
                                          color = clust.var.cat,
                                          group = line_group),
                                      position=position_jitter(w=0.02, h=0.02)) +
      geom_errorbar(position=pd, aes(ymin = l.ci, ymax = u.ci), width = .025) +
      geom_line(position=pd) +
      geom_point(position=pd) +
      geom_abline(intercept = 0, slope = 1) +
      ggtitle(pt) +
      ## fix the legends a bit
      labs(color = "Cluster Var.", shape='Method', linetype='Method') + ## legend titles
      theme(panel.spacing.x = unit(4, "mm")) +
      theme(text = element_text(size = 20))  + # increase base size of all font
      xlab(expression(Target~Coverage:~alpha)) +
      ylab('Mean Coverage of Field Estimates')

    if(dl=='binom'){
      fit_coverage_CI_summary <- fit_coverage_CI_summary +
        facet_wrap(. ~ `Number of Clusters`, labeller = label_both)
      plot.w = 10
      plot.h = 7
    }
    if(dl == 'normal'){
      fit_coverage_CI_summary <- fit_coverage_CI_summary +
        facet_grid(`Number of Clusters` ~ `Observation Variance`, labeller = label_both)
      plot.w = 10
      plot.h = 12
    }

    text = paste("\n   The following is text that'll appear in a plot window.\n",
                 "       As you can see, it's in the plot window\n",
                 "       One might imagine useful information here")
    fit_coverage_CI_summary_text <-
      ggplot() +
      annotate("text", x = 4, y = 25, size=8, label = text) +
      theme_void()

    return(fit_coverage_CI_summary)

  },

  width = "auto",
  height = reactive(input$plotHeight))

  output$fieldPlotText <- renderUI({

    cov.perc        <- paste0(input$coverage, '%')
    dl              <- c("binomial", "Gaussian")[as.numeric(input$dataType)]
    model.selection <- as.numeric(input$methodType)
    mesh.resolution <- c('low', 'medium', 'high', 'all')[as.numeric(input$meshRes)]
    ## norm.var        <- (c(0.1, 0.2, 0.4) ^ 2)[as.numeric(input$obsVar)]

    model.plot.names <- c("TMB",
                          "INLA: G + EB",
                          "INLA: G + CCD",
                          "INLA: SL + EB",
                          "INLA: SL + CCD",
                          "INLA: L + EB",
                          "INLA: L + CCD")[model.selection]
    model.plot.names.string <- model.plot.names[1]
    model.plot.names <- model.plot.names[-1]
    while(length(model.plot.names) > 1){
      model.plot.names.string <- paste(model.plot.names.string, model.plot.names[1], sep = ', ')
      model.plot.names <- model.plot.names[-1]
    }
    if(length(model.plot.names) == 1){
      if(length(model.selection) > 2){
        model.plot.names.string <- paste0(model.plot.names.string, ',')
      }
      model.plot.names.string <- paste(model.plot.names.string, model.plot.names[1], sep = ' and ')
    }

    str1 <- paste0('Comparison of the average estimated field coverage of the ',
                   'simulated truth, faceted by ',
                   ifelse(dl == 'Gaussian', 'observation variances and ', ''),
                   'the number of clusters, from ',
                   model.plot.names.string,
                   ', plotted against the target nominal coverage, for ', dl,
                   ' observation experiments with ',
                   ifelse(mesh.resolution == 'all', 'low, medium, and high resolution SPDE triangulations.',
                          paste0('the ', mesh.resolution, ' resolution SPDE triangulation.')),
                   ' Colors represent different cluster (i.i.d nugget) variances',
                   ' used in an experiment. Each point',
                   ' is the median average coverage of ',
                   ifelse(mesh.resolution == 'all', 'three experiments, calculated across 75 replicates,',
                          'one experiment, calculated across 25 replicates,'),
                   '  and the bars represent the middle ', cov.perc, ' quantile range of the ',
                   'average coverage across replicates.' )

    ## str1 <- paste("You have selected", input$meshRes)
    ## str2 <- paste("You have chosen a range that goes from")
    ## HTML(paste(str1, str2, sep = '<br/>'))
    HTML(str1)
  })

  ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  output$biasPlot <- renderPlot({

    cov.width       <- input$coverage / 100
    dl              <- c("binom", "normal")[as.numeric(input$dataType)]
    model.selection <- as.numeric(input$methodType)
    mesh.resolution <- as.numeric(input$meshRes)
    ## norm.var        <- (c(0.1, 0.2, 0.4) ^ 2)[as.numeric(input$obsVar)]

    models.to.plot <- c("TMB",
                        "INLA_EB_G",
                        "INLA_CCD_G",
                        "INLA_EB_S",
                        "INLA_CCD_S",
                        "INLA_EB_L",
                        "INLA_CCD_L")[model.selection]

    model.plot.names <- c("TMB",
                          "INLA: G + EB",
                          "INLA: G + CCD",
                          "INLA: SL + EB",
                          "INLA: SL + CCD",
                          "INLA: L + EB",
                          "INLA: L + CCD")[model.selection]


    ## make the plot title
    pt <- sprintf('Parameter Bias for %s Observations',
                  stringr::str_to_title(dl))
    #    if(dl == "normal"){
    #     pt <- paste0(pt, sprintf(" with %0.02f Variance:\n", norm.var))
    #  }else{
    pt <- paste0(pt, ":\n")
    # }
    pt <- paste(pt, sprintf('Median and %0.0f%% Quantile Bars across Monte Carlo Replicates', cov.width*100))

    # subset to all models desired
    long.cov.sub <- rbindlist(lapply(models.to.plot, function(x){subset(fe.mean.long,
                                                                        data.lik == dl &
                                                                          grepl(x, fe.mean.long$fit_type))}))

    ## subset to mesh
    if(mesh.resolution %in% c('low', 'med', 'high')){
      long.cov.sub <- subset(long.cov.sub, mesh.res == mesh.resolution)
    } ## ow, it is 'all', and we average across it

    # nice plot legend names
    for(nn in 1:length(model.plot.names)){
      long.cov.sub[fit_type == models.to.plot[nn], fit_type := model.plot.names[nn]]
    }

    # get intervals
    fe.mean.long.sum <-  summarySE(long.cov.sub, measurevar="value",
                                   groupvars=c("data.lik", 'norm.var', 'n.clust',
                                               "fit_type", 'clust.var.cat',
                                               'variable'),
                                   conf.interval = cov.width)

    ## final rename for plotting
    setnames(fe.mean.long.sum, 'n.clust',  'Number of Clusters')
    setnames(fe.mean.long.sum, 'norm.var', 'Observation Variance')


    pd <- position_dodge(.25)
    fe_bias_summary <- ggplot(fe.mean.long.sum,
                              aes(x=log(`Number of Clusters`), y=med,
                                  shape = fit_type,
                                  linetype = fit_type,
                                  colour = clust.var.cat)) +
      geom_errorbar(position=pd, aes(ymin=l.ci, ymax=u.ci), width=.025) +
      geom_line(position=pd) +
      geom_point(position=pd, size=2) +
      geom_abline(intercept = 0, slope=0) +
      ## facet_wrap(. ~ variable, scales='free_y') +
      ggtitle(pt) +
      ## fix the legends a bit
      labs(color = 'Cluster Var.', shape='Method', linetype = 'Method') + ## legend titles
      xlab('Number of Clusters') +
      scale_x_continuous(breaks = log(sort(fe.mean.long.sum$`Number of Clusters`)), ## add log x-axis labels
                         labels = paste0('ln(', sort(fe.mean.long.sum$`Number of Clusters`), ')')) +
      theme(axis.text.x = element_text(angle = 45, hjust = 1, face = 'plain', family='sans')) + ## rotate x-axis ticks
      theme(text = element_text(size = 20))  + # increase base size of all font
      ylab('Bias: (Estimate - True)')

    if(dl=='binom'){
      fe_bias_summary <- fe_bias_summary +
        facet_wrap(. ~ variable,
                   labeller = labeller(.cols = label_value),
                   scales='free_y')
      plot.w <- 10
      plot.h <- 7
    }
    if(dl == 'normal'){
      fe_bias_summary <- fe_bias_summary +
        facet_grid(variable ~ `Observation Variance`,
                   labeller = labeller(.rows = label_value, .cols = label_both),
                   scales='free')
      plot.w <- 10
      plot.h <- 12
    }

    return(fe_bias_summary)

  },
  width = "auto",
  height = reactive(input$plotHeight))

  output$biasPlotText <- renderUI({

    cov.perc        <- paste0(input$coverage, '%')
    dl              <- c("binomial", "Gaussian")[as.numeric(input$dataType)]
    model.selection <- as.numeric(input$methodType)
    mesh.resolution <- c('low', 'medium', 'high', 'all')[as.numeric(input$meshRes)]
    ## norm.var        <- (c(0.1, 0.2, 0.4) ^ 2)[as.numeric(input$obsVar)]

    model.plot.names <- c("TMB",
                          "INLA: G + EB",
                          "INLA: G + CCD",
                          "INLA: SL + EB",
                          "INLA: SL + CCD",
                          "INLA: L + EB",
                          "INLA: L + CCD")[model.selection]
    model.plot.names.string <- model.plot.names[1]
    model.plot.names <- model.plot.names[-1]
    while(length(model.plot.names) > 1){
      model.plot.names.string <- paste(model.plot.names.string, model.plot.names[1], sep = ', ')
      model.plot.names <- model.plot.names[-1]
    }
    if(length(model.plot.names) == 1){
      if(length(model.selection) > 2){
        model.plot.names.string <- paste0(model.plot.names.string, ',')
      }
      model.plot.names.string <- paste(model.plot.names.string, model.plot.names[1], sep = ' and ')
    }

    str1 <- paste0('Comparison of the estimated parameter bias from ',
                   model.plot.names.string,
                   ', plotted against the number of cluster observations for the ')

    str1 <- paste0(str1, dl, ' data experiments',
                   ifelse(dl == 'Gaussian', ' with varying observation variances. ',
                          '. '),
                   'Colors represent different cluster (i.i.d nugget) variances',
                   ' used in an experiment.')

    if(mesh.resolution == 'all'){
      str1 <- paste(str1,
                    'Each point is the median bias of three experiments (low, medium, and',
                    'high resolution SPDE triangulations), calculated across 75 replicates,'
                    )
    }else{
      str1 <- paste0(str1,
                     ' Each point is the median bias of one experiment (with ', mesh.resolution,
                     ' resolution SPDE triangulation), calculated across 25 replicates,'
                     )
    }

    str1 <- paste(str1, 'and the bars represent the middle', cov.perc,
                  'quantile range of the bias across replicates.')

    ## str1 <- paste("You have selected", input$meshRes)
    ## str2 <- paste("You have chosen a range that goes from")
    ## HTML(paste(str1, str2, sep = '<br/>'))
    HTML(str1)
  })

}

? helpText
q()
compar.dir
q()
